using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;
using System.Collections.ObjectModel;
using System.Windows.Input;
using MvvmFoundation.Wpf;


namespace Win1
{
   public class Agents : ObservableCollection<Agent> { };  // Just to reference it from xaml

   [Serializable]
   public class Agent : INotifyPropertyChanged
   {

      string id;
      string codeName;
      string speciality;
      string assignment;

       #region Constructors

      public Agent()
      {
      }

       public Agent(string aId, string aName, string aAddress, string aSpeciality, string aAssignment)
      {
         id = aId;
         codeName = aName;
         speciality = aSpeciality;
         assignment = aAssignment;
      }

       #endregion // Constructors

       #region Commands

       ICommand _addCommand;
       public ICommand AddCommand
       {
           get { return _addCommand ?? (_addCommand = new RelayCommand(AddAgent)); }
       }
       private void AddAgent()
       {
           List<Agent> agentCollection = new List<Agent>();
           
           agentCollection.Add(new Agent("000", "***", "", "xxxxx", "...")); 
           CurrentIndex = agentCollection.Count - 1;
       }

       #endregion // Commands

       #region Properties

      public int CurrentIndex
      {
          get { return currentIndex; }
          set
          {
              if (currentIndex != value)
              {
                  currentIndex = value;
                  NotifyPropertyChanged();
              }
          }
      }

      public event PropertyChangedEventHandler PropertyChanged;
      protected void Notify(string propName)
      {
          if (this.PropertyChanged != null)
          {
              PropertyChanged(this, new PropertyChangedEventArgs(propName));
          }
      }

      private void NotifyPropertyChanged([CallerMemberName] string propertyName = null)
      {
          var handler = PropertyChanged;
          if (handler != null)
          {
              handler(this, new PropertyChangedEventArgs(propertyName));
          }
      }

      public string ID
      {
         get
         {
            return id;
         }
         set
         {
            id = value;
            NotifyPropertyChanged("ID");
         }
      }

      public string CodeName
      {
         get
         {
            return codeName;
         }
         set
         {
            codeName = value;
            NotifyPropertyChanged("CodeName");
         }
      }

      public string Speciality
      {
         get
         {
            return speciality;
         }
         set
         {
            speciality = value;
            Notify("Speciality");
         }
      }

      public string Assignment
      {
         get
         {
            return assignment;
         }
         set
         {
            assignment = value;
            Notify("Assignment");
         }
      }

      #endregion // Properties

      #region Fields

      int currentIndex = -1;

      #endregion // Fields
   }
}